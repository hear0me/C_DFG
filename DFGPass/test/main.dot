digraph "DFG for'main' function" {
	Node0x154f150[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x154f1e0[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x154f2d0[shape=record, label="  store i32 0, i32* %1, align 4"];
	Node0x154f4e0[shape=record, label="  store i32 0, i32* %2, align 4"];
	Node0x154f5a0[shape=record, label="  br label %4"];
	Node0x154f660[shape=record, label="  %5 = load i32, i32* %2, align 4"];
	Node0x154f6f0[shape=record, label="  %6 = icmp slt i32 %5, 7"];
	Node0x154f840[shape=record, label="  br i1 %6, label %7, label %11"];
	Node0x154f9d0[shape=record, label="  br label %8"];
	Node0x154fad0[shape=record, label="  %9 = load i32, i32* %2, align 4"];
	Node0x154fb60[shape=record, label="  %10 = add nsw i32 %9, 1"];
	Node0x154fbf0[shape=record, label="  store i32 %10, i32* %2, align 4"];
	Node0x154fc60[shape=record, label="  br label %4, !llvm.loop !4"];
	Node0x15507a0[shape=record, label="  ret i32 0"];
	Node0x154f3f0[shape=record, label="  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))", color=blue];
	Node0x154f8b0[shape=record, label="  call void @ff3()", color=blue];
	Node0x154f150 -> Node0x154f1e0[label="[control_flow]"];
	Node0x154f1e0 -> Node0x154f2d0[label="[control_flow]"];
	Node0x154f2d0 -> Node0x154f3f0[label="[control_flow]"];
	Node0x154f3f0 -> Node0x154f4e0[label="[control_flow]"];
	Node0x154f4e0 -> Node0x154f5a0[label="[control_flow]"];
	Node0x154f5a0 -> Node0x154f660[label="[control_flow]"];
	Node0x154f660 -> Node0x154f6f0[label="[control_flow]"];
	Node0x154f6f0 -> Node0x154f840[label="[control_flow]"];
	Node0x154f840 -> Node0x154f8b0[label="[control_flow]"];
	Node0x154f840 -> Node0x15507a0[label="[control_flow]"];
	Node0x154f8b0 -> Node0x154f9d0[label="[control_flow]"];
	Node0x154f9d0 -> Node0x154fad0[label="[control_flow]"];
	Node0x154fad0 -> Node0x154fb60[label="[control_flow]"];
	Node0x154fb60 -> Node0x154fbf0[label="[control_flow]"];
	Node0x154fbf0 -> Node0x154fc60[label="[control_flow]"];
	Node0x154fc60 -> Node0x154f660[label="[control_flow]"];
edge [color=red]
	Node0x154f660 -> Node0x154f660[label="[loop_dep]"];
	Node0x154f660 -> Node0x154f6f0[label="[loop_dep]"];
	Node0x154f660 -> Node0x154f840[label="[loop_dep]"];
	Node0x154f660 -> Node0x154f8b0[label="[loop_dep]"];
	Node0x154f660 -> Node0x154f9d0[label="[loop_dep]"];
	Node0x154f660 -> Node0x154fad0[label="[loop_dep]"];
	Node0x154f660 -> Node0x154fb60[label="[loop_dep]"];
	Node0x154f660 -> Node0x154fbf0[label="[loop_dep]"];
	Node0x154f660 -> Node0x154fc60[label="[loop_dep]"];
	Node0x154f2d0 -> Node0x154f150[label="[anti_dep]"];
	Node0x154f4e0 -> Node0x154f1e0[label="[anti_dep]"];
	Node0x154fbf0 -> Node0x154f1e0[label="[anti_dep]"];
	Node0x154f260 -> Node0x154f2d0[label="[flow_dep]"];
	Node0x154f260 -> Node0x154f4e0[label="[flow_dep]"];
	Node0x154f1e0 -> Node0x154f660[label="[flow_dep]"];
	Node0x154f660 -> Node0x154f6f0[label="[flow_dep]"];
	Node0x154f6f0 -> Node0x154f840[label="[flow_dep]"];
	Node0x154f1e0 -> Node0x154fad0[label="[flow_dep]"];
	Node0x154fad0 -> Node0x154fb60[label="[flow_dep]"];
	Node0x154fb60 -> Node0x154fbf0[label="[flow_dep]"];
}
